Libforwardsec. A library for puncturable forward secure encryption.
============================

This library implements three schemes for fine grained forward secure encryption. Specifically the HIBE scheme due to Boneh Boyen Goh("Hierarchical identity based encryption with constant size ciphertext" EUROCRYPT 2005), and  the  Puncturable  Public key encryption and Puncturable Forward Secure Encryption schemes due to Green and Miers("Forward Secure Asynchronous Messaging from Puncturable Encryption" IEEES&P 2015)

This is research code written by one graduate student built on top of a research  pairing library  (RELIC) written by some other (former) graduate student. We haven't even thoroughly reviewed this code ourselves. It might be secure enough to send cat pictures over the internet, but don't count on it.

TODOs:
* profile and optimize code. It's slower than we expect (i.e. the cost of pairings doesn't dominate)
* remove extra group element in ciphertext for combined scheme
* add symmetric encryption and ratcheting
* replace all uses of [] in vectors with .at (since it's always bound checked)

Dependencies
-----------------------------
* For math: 
    * relic (https://github.com/relic-toolkit/relic) 
    * gmp (assuming relic is configured to use it) 
* For serialization:
    *  cereal(https://github.com/USCiLab/cereal) 
* For testing:
    * Google test (https://code.google.com/p/googletest/) 
    

Build
----------------------------
This project builds with cmake.
    
    cd build/ 
    cmake ../
    make 
    make check # (optional) builds and runs tests.
    make bench # (optional) builds and runs benchmarks
    make install 

It is known to build and pass all tests on OSX 10.9.5  with Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn) 
and Ubuntu 14.04 with gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1). It is not known explicitly to fail on anything.

Note, Cmake supports a bunch of other build systems via "cmake -G 'generator name' ../"
Among them Ninja and project files for your favorite/
least favorite IDEs (xcode, eclipse,visualstudio, etc)

For a full list of supported build systems run:
cmake --help



Installing  dependencies
----------------------------

# Relic (note, depends on gmp)
    #from a suitable directory
    git clone https://github.com/relic-toolkit/relic.git
    cd relic
    git checkout relic-toolkit-0.4.0 
    cmake -G "Unix Makefiles" -DMULTI=OPENMP -DCOMP="-O2 -funroll-loops -fomit-frame-pointer" -DARCH="X64"  -DRAND="UDEV" -DWITH="BN;DV;FP;FPX;EP;EPX;PP;PC;MD" -DCHECK=off -DVERBS=off -DDEBUG=on -DBENCH=0 -DTESTS=1 -DARITH=gmp -DFP_PRIME=256 -DFP_QNRES=off -DFP_METHD="BASIC;COMBA;COMBA;MONTY;LOWER;SLIDE" -DFPX_METHD="INTEG;INTEG;LAZYR" -DPP_METHD="LAZYR;OATEP"
    make 
    make install 
    
### GMP
Install using your package manager.
    
### Cereal
Cereal is a header only library.  Try your local package manager or 
    
    #from a suitable directory
    git clone https://github.com/USCiLab/cereal.git
    cd cereal
    git checkout v1.0.0
    cp -R ./include/* /usr/local/include/

### Google test
    #from the root of the libforwardsec project
    git submodule init
    git submodule update

Android BUILD
----------------------------
1.  Make a standalone toolchain 

    #from a suitable directory
    git clone https://github.com/USCiLab/cereal.git
    ./make-standalone-toolchain.sh  --platform=android-21 --install-dir=/home/ian/android_standalone/ --ndk-dir=/home/ian/androidndk/android-ndk-r10d/ --arch=arm --system=linux-x86_64  --toolchain=arm-linux-androideabi-clang3.5 --stl=libc++
     
2. Build gmp (note using the copy form https://github.com/Rupan/gmp doens't work)

    1. make export the standalone toolchain

    export STANDALONE_TOOLCHAIN="/PATH/TO/TOOLCHAIN"
    export CC="$STANDALONE_TOOLCHAIN/bin/arm-linux-androideabi-gcc --sysroot=$STANDALONE_TOOLCHAIN/sysroot"
    export CXX="$STANDALONE_TOOLCHAIN/bin/arm-linux-androideabi-g++ --sysroot=$STANDALONE_TOOLCHAIN/sysroot"
    export AR="$STANDALONE_TOOLCHAIN/bin/arm-linux-androideabi-ar"
    export RANLIB="$STANDALONE_TOOLCHAIN/bin/arm-linux-androideabi-ranlib"
    export SYSROOT="$STANDALONE_TOOLCHAIN/sysroot"

    2. Optimize compiler
    
         export CFLAGS="-O4 -flto -Ofast -mcpu=cortex-a15 -fprefetch-loop-arrays -mfpu=neon -funroll-all-loops -mtune=cortex-a15 -ftree-vectorize -fomit-frame-pointer -mvectorize-with-neon-quad -mthumb-interwork -finline-small-functions  -ffast-math -marm -ffunction-sections -fdata-sections -fomit-frame-pointer -finline-small-functions "
    3. Configfure
    
        /configure --host=arm-linux-androideabi
    
    4.  edit config.h and make sure the following is set to zero. (note, this is set by ./configure, so your change will be overwritten)
    
    
        /* Define to 1 if you have the `localeconv' function. */
        #define HAVE_LOCALECONV 0
    

    5. Build
    
          make -j


2. build relic 
    1. 
    remove src/CMakeLists.txt:153:      target_link_libraries(${LIBRARY} rt)
     2. Configure
    
    
        cmake -DCMAKE_TOOLCHAIN_FILE=./android.toolchain.cmake -DANDROID_ABI="armeabi-v7a with NEON"  -DANDROID_STANDALONE_TOOLCHAIN=/home/ian/android_standalone/  -DCOMP="-O4 -flto -Ofast -mcpu=cortex-a15 -fprefetch-loop-arrays -mfpu=neon -mfloat-abi=hard -funroll-all-loops -mtune=cortex-a15 -ftree-vectorize -fomit-frame-pointer -mvectorize-with-neon-quad -mthumb-interwork -finline-small-functions  -ffast-math -marm -ffunction-sections -fdata-sections -fomit-frame-pointer -finline-small-functions" -DARCH="NONE"  -DRAND="UDEV" -DWITH="BN;DV;FP;FPX;EP;EPX;PP;PC;MD" -DCHECK=off -DVERBS=off -DDEBUG=on -DBENCH=0 -DTESTS=1 -DARITH=gmp -DFP_PRIME=256 -DFP_QNRES=off -DFP_METHD="BASIC;COMBA;COMBA;MONTY;LOWER;SLIDE" -DFPX_METHD="INTEG;INTEG;LAZYR" -DPP_METHD="LAZYR;OATEP" -DWORD="32" -DCHECK=off and -DTRACE=off -DCMAKE_BUILD_TYPE=Release
    
    
   4. 3. Build
    
    
        make -j 

3. build libforwardsec

 
    cmake -DCMAKE_TOOLCHAIN_FILE=../android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI="armeabi-v7a with NEON" -DANDROID_STANDALONE_TOOLCHAIN=/home/ian/android_standalone/   ../




4. running (this should work without root)
Load libmgp.so, librelic.so, libforwarsec.so, and an executable into /data/local/tmp/

    
    adb push file /data/local/tmp/
    adb shell 
    cd /data/local/tmp/
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data/local/tmp/
    ./executable